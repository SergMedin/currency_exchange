name: Main Exchange-app workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: Testing using internal tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: exchange_user
          POSTGRES_PASSWORD: exchange_password
          POSTGRES_DB: exchange_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r requirements.txt 
    - name: Test with unittest
      env:
        POSTGRES_USER: exchange_user
        POSTGRES_PASSWORD: exchange_password
        POSTGRES_DB: exchange_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m unittest discover -p "*.py"

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/exchange_app:latest

  deploy:
    name: Deployment
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        port: ${{ secrets.PORT }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.yml"
        target: "exchange_app"
    - name: Main deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        port: ${{ secrets.PORT }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd exchange_app
          rm -f .env
          touch .env
          echo EXCH_TG_TOKEN=${{ secrets.EXCH_TG_TOKEN }} >> .env
          echo LOG_LVL=${{ secrets.LOG_LVL }} >> .env
          echo CONSOLE_LOG_LVL=${{ secrets.CONSOLE_LOG_LVL }} >> .env
          echo EXCH_DB_CONN_STRING=${{ secrets.EXCH_DB_CONN_STRING }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo GOOGLE_ACC_KEY_FILE=${{ secrets.GOOGLE_ACC_KEY_FILE }} >> .env
          echo ZMQ_ORDERS_LOG_ENDPOINT=${{ secrets.ZMQ_ORDERS_LOG_ENDPOINT }} >> .env
          echo SILENCE_WARNINGS_ENV_KEY=${{ secrets.SILENCE_WARNINGS_ENV_KEY }} >> .env
          echo GOOGLE_SPREADSHEET_SHEET_TITLE=${{ secrets.GOOGLE_SPREADSHEET_SHEET_TITLE }} >> .env
          echo EXCH_CURRENCYFREAKS_TOKEN=${{ secrets.EXCH_CURRENCYFREAKS_TOKEN }} >> .env
          rm -f ${{ secrets.GOOGLE_ACC_KEY_FILE }}
          touch ${{ secrets.GOOGLE_ACC_KEY_FILE }}
          echo '${{ secrets.GOOGLE_ACC_FILE_CONTENT }}' >> ${{ secrets.GOOGLE_ACC_KEY_FILE }}
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml down
          docker compose -f docker-compose.yml up -d
          docker system prune -af

  send_message:
    name: Send message to Telegram Bot about succesful deploy
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.STATUS_TG_SEND_TO }}
        token: ${{ secrets.STATUS_TG_BOT_TOKEN }}
        message: ExchangeApp deploy (main branch) was succesful!